//============================================================================
// Name        : testing.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================
/*
#include <iostream>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
using namespace std;

int main() {
	// Create an empty property tree object
	using boost::property_tree::ptree;
    ptree pt;

	string jsonS = "{\“age\”:42,\”name\”:\”John\”}";
	stringstream lineStream;

	lineStream << jsonS;

	cout << "reading json" << endl;
	read_json(lineStream, pt);
	cout << "reading age" << endl;
	int result = pt.get<int>("name");

	cout << "age: " << result << endl;



	return 0;
}
*/

#ifdef _MSC_VER
#include <boost/config/compiler/visualc.hpp>
#endif
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/foreach.hpp>
#include <cassert>
#include <exception>
#include <iostream>
#include <sstream>
#include <string>

int main()
{
try
{
std::stringstream ss;
ss << "{ \"root\": { \"values\": [1, 2, 3, 4, 5 ] } }";

boost::property_tree::ptree pt;
boost::property_tree::read_json(ss, pt);

BOOST_FOREACH(boost::property_tree::ptree::value_type &v, pt.get_child("root.values"))
{
assert(v.first.empty()); // array elements have no names
std::cout << v.second.data() << std::endl;
}
return EXIT_SUCCESS;
}
catch (std::exception const& e)
{
std::cerr << e.what() << std::endl;
}
return EXIT_FAILURE;
}
